using System.Text;
using Dapper;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Reflection;

namespace Hackcom.Dapper
{
    public interface IRepoContext
    {
        IDbConnection CeateConnection();
    }

    public interface IDapperRepository<T>
    {
        IEnumerable<T> GetAll();
        T Get(object primaryKey);
        IEnumerable<T> Find(string where, object param = null);
        IEnumerable<T> Select(string extraQuery, object param = null);

        int Insert(T entity);
        T Add(T item);
        T Update(T item);
        int Remove(object primaryKey);
        int Execute(string sql, object param);

        void Set(string tableName = null, string querySelect = null, string queryInsert = null, string queryUpdate = null, string queryPrimaryKey = null, bool primaryKeyAutoGenerated = true);
        void MapFields(string[] dbColumns, string[] entityProperties = null);
    }

    public class DapperRepository<T> : IDapperRepository<T>
    {
        #region Properties
        private IRepoContext _ctx;

        private string _tableName;
        protected string TableName
        {
            get
            {
                if (string.IsNullOrEmpty(_tableName))
                {
                    _tableName = typeof(T).Name;
                }

                return _tableName;
            }
            set
            {
                _tableName = value;
            }
        }

        private string _querySelect;
        protected string QuerySelect
        {
            get
            {
                if (string.IsNullOrEmpty(_querySelect))
                {
                    string selectFields = string.Empty;
                    if (EntityFields.Any())
                    {
                        var fields = EntityFields.TakeWhile((t, i) => DbFields.Count >= i).Select((t, i) => string.Format("{0} AS {1}", DbFields[i], t)).ToList();
                        selectFields = string.Join(",", fields);
                    }
                    else
                    {
                        selectFields = string.Join(",", DbFields);
                    }

                    _querySelect = string.Format("Select {1} From {0}", TableName, selectFields);
                }

                return _querySelect;
            }
            set
            {
                _querySelect = value;
            }
        }

        private string _queryPrimaryKey;
        protected string QueryPrimaryKey
        {
            get
            {
                if (string.IsNullOrEmpty(_queryPrimaryKey))
                {
                    _queryPrimaryKey = FirstField+"=@"+EntityFields[0];
                }

                return _queryPrimaryKey;
            }
            set
            {
                _queryPrimaryKey = value;
            }
        } 

        private string _queryInsert;
        protected string QueryInsert
        {
            get
            {
                if(string.IsNullOrEmpty(_queryInsert))
                {
                    List<string> dbFields;
                    List<string> entityFields;

                    if (IsPrimaryKeyAutoGenerated)
                    {
                        dbFields = DbFields.Skip(1).ToList();
                        entityFields = EntityFields.Skip(1).ToList();
                    }
                    else
                    {
                        dbFields = DbFields;
                        entityFields = EntityFields;
                    }

                    _queryInsert = string.Format("Insert Into {0}({1}) Values(@{2})", 
                        TableName,
                        string.Join(",", dbFields), 
                        string.Join(",@", entityFields));
                }
                return _queryInsert;
            }
            set
            {
                _queryInsert = value;
            }
        }

        private string _queryUpdate;
        protected string QueryUpdate
        {
            get
            {
                if (string.IsNullOrEmpty(_queryUpdate))
                {
                    var placeHolder = "{{value}}";
                    var setFields = DbFields.Select(c => c + "=@" + placeHolder).ToList();

                    for (int i = 0; i < setFields.Count; ++i)
                    {
                        if (i >= EntityFields.Count)
                        {
                            break;
                        }

                        setFields[i] = setFields[i].Replace(placeHolder, EntityFields[i]);
                    }

                    _queryUpdate = string.Format("Update {0} Set {1} Where {2}",
                        TableName,
                        string.Join(",", setFields.Skip(1).Select(f => f)),
                        QueryPrimaryKey);
                }

                return _queryUpdate;
            }
            set
            {
                _queryUpdate = value;
            }
        }

        private List<string> _dbFields;
        protected List<string> DbFields
        {
            get 
            {
                if (_dbFields == null)
                {
                    _dbFields = new List<string>(GetEntityFieldNames());
                }
                return _dbFields;
            }
            set
            {
                _dbFields = value;
            }
        }

        protected string FirstField
        {
            get
            { 
                return DbFields[0];
            }
        }

        private List<string> _entityFields;
        protected List<string> EntityFields
        {
            get {
                if (_entityFields == null)
                {
                    _entityFields = new List<string>(GetEntityFieldNames());
                }
                return _entityFields;
            }

            set
            {
                _entityFields = value;
            }
        }

        private bool _isPrimaryKeyAutoGenerated = true;
        protected bool IsPrimaryKeyAutoGenerated
        {
            get { return _isPrimaryKeyAutoGenerated; }
            set { _isPrimaryKeyAutoGenerated = value; }
        }

        #endregion

        #region Public Interfaces
        public DapperRepository(IRepoContext ctx)
        {
            _ctx = ctx;
        }

        public void Set(string tableName=null, string querySelect = null, string queryInsert = null, string queryUpdate = null, string queryPrimaryKey=null, bool primaryKeyAutoGenerated = true) 
        {
            TableName = tableName;
            QuerySelect = querySelect;
            QueryInsert = queryInsert;
            QueryUpdate = queryUpdate;
            QueryPrimaryKey = queryPrimaryKey;
            IsPrimaryKeyAutoGenerated = primaryKeyAutoGenerated;
        }

        public void MapFields(string[] dbColumns, string[] entityProperties = null)
        {
            if (dbColumns == null || dbColumns.Any() == false)
            {
                throw new Exception("No property defined");
            }

            DbFields = new List<string>(dbColumns);
            if (entityProperties != null)
            {
                EntityFields = new List<string>(entityProperties);
            }
        }

        public virtual IEnumerable<T> GetAll()
        {
            return UsingDb(db => db.Query<T>(QuerySelect, null));
        }

        public virtual T Get(object primaryKey)
        {
            return Find(QueryPrimaryKey, primaryKey).FirstOrDefault();
        }

        public virtual IEnumerable<T> Find(string where, object param = null)
        {
            string sql = SelectWhere(where);
            return UsingDb(db => db.Query<T>(sql, param));
        }

        public virtual IEnumerable<T> Select(string extraQuery, object param = null)
        {
            string sql = string.Format("{0} {1}", QuerySelect, extraQuery);
            return UsingDb(db => db.Query<T>(sql, param));
        }

        public virtual T Add(T entity)
        {
            string where = IsPrimaryKeyAutoGenerated
                ? string.Format("{0} = SCOPE_IDENTITY()", FirstField)
                : QueryPrimaryKey;
            string sql = string.Format("{0}; {1}", QueryInsert, SelectWhere(where));
            
            var param = Mapping(entity) as object;
            return UsingDb(db => db.Query<T>(sql, param)).First();
        }

        public virtual int Insert(T entity)
        {
            string sql = string.Format("{0}", QueryInsert);
            var param = Mapping(entity) as object;
            return UsingDb(db => db.Execute(sql, param));
        }

        public virtual T Update(T entity)
        {
            var param = Mapping(entity) as object;
            UsingDb(db => db.Execute(QueryUpdate, param));
            return entity;
        }

        public virtual int Remove(object primaryKey)
        {
            string sql = string.Format("Delete {0} Where {1}", TableName, QueryPrimaryKey);
            return UsingDb(db => db.Execute(sql, primaryKey));
        }

        public virtual int Execute(string sql, object param)
        {
            return UsingDb(db => db.Execute(sql, param));
        }

        #endregion

        #region Protected Interfaces
        protected U UsingDb<U>(Func<IDbConnection, U> func)
        {
            using (var db = _ctx.CeateConnection())
            {
                return func(db);
            }
        }

        protected virtual string SelectWhere(string where)
        {
            return string.Format("{0} Where {1}", QuerySelect, where);
        }

        protected virtual T Mapping(T entity)
        {
            return entity;
        }
        #endregion

        #region Private Functions
        List<string> GetEntityFieldNames()
        {
            PropertyInfo[] props = typeof(T).GetProperties();
            return props.Select(p => p.Name).ToList();
        }
        #endregion
    }
}
